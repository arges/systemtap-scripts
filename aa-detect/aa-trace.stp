#!/usr/bin/stap -g
/*
 * Copyright (C) 2012 Canonical
 * Author: Chris J Arges <chris.j.arges@canonical.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 */

%{
#include <linux/sched.h>
#include <linux/types.h>
#include <linux/cred.h>
#include <linux/kernel.h>

const struct cred *get_task_cred(struct task_struct *task)
{
        const struct cred *cred;

        rcu_read_lock();

        do {
                cred = __task_cred((task));
                BUG_ON(!cred);
        } while (!atomic_inc_not_zero(&((struct cred *)cred)->usage));

        rcu_read_unlock();
        return cred;
}

struct aa_policy {
        char *name;
        char *hname;
        struct kref count;
        struct list_head list;
        struct list_head profiles;
};

struct aa_profile {
        struct aa_policy base;
        struct aa_profile *parent;
        void * ns;
        struct aa_profile *replacedby;
};

struct aa_task_cxt {
        struct aa_profile *profile;
        struct aa_profile *onexec;
        struct aa_profile *previous;
        u64 token;
};

%}

function dump_aa:string(ptr:long)
%{
	int n = 0;
	struct task_struct *task = (struct task_struct *)(long)THIS->ptr;
	char *comm = task->comm;
	const struct cred *cred = get_task_cred(task);
	struct aa_task_cxt *cxt = (struct aa_task_cxt *)cred->security;
	struct aa_profile *profile = (struct aa_profile *)cxt->profile;
	while (profile->replacedby) {
		profile = profile->replacedby;
		n++;
	}
	put_cred(cred);
	if (n)
		sprintf(THIS->__retvalue,"AA-TRACE: %-20.20s\t%lx\t%d\n", comm, (long)task, n);

%}

probe kernel.function("apparmor_getprocattr").call {
	printf("%s",dump_aa($task));
}

probe timer.ms(10000) {
	exit();
}

